openapi: 3.0.3
info:
  title: Bank Cards API
  description: REST API для управления банковскими картами, транзакциями и пользователями
  version: 1.0.0
  contact:
    name: API Support
    email: support@bankcards.com

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://api.bankcards.com
    description: Production server

tags:
  - name: Authentication
    description: API для аутентификации и регистрации пользователей
  - name: User Controller
    description: Операции пользователя по управлению картами
  - name: Cards Controller
    description: Общие операции с картами (доступны пользователям и администраторам)
  - name: Transaction Controller
    description: API для управления транзакциями и операциями с картами
  - name: Admin Controller
    description: Административные операции (управление пользователями, картами и транзакциями)

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT токен для авторизации

  schemas:
    AuthDto:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: SecurePass123
        firstName:
          type: string
          example: Иван
        lastName:
          type: string
          example: Иванов

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          example: SecurePass123

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        email:
          type: string
          format: email
          example: user@example.com
        firstName:
          type: string
          example: Иван
        lastName:
          type: string
          example: Иванов
        role:
          type: string
          enum: [USER, ADMIN]
          example: USER
        createdDate:
          type: string
          format: date-time

    CardDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        cardNumber:
          type: string
          example: "4532015112830366"
        balance:
          type: number
          format: decimal
          example: 1500.50
        status:
          type: string
          enum: [ACTIVE, BLOCKED, PENDING_BLOCK]
          example: ACTIVE
        owner:
          $ref: '#/components/schemas/UserDto'
        createdDate:
          type: string
          format: date-time

    BalanceResponse:
      type: object
      properties:
        balance:
          type: number
          format: decimal
          example: 1500.50

    DepositRequest:
      type: object
      required:
        - cardNumber
        - amount
      properties:
        cardNumber:
          type: string
          example: "4532015112830366"
        amount:
          type: number
          format: decimal
          minimum: 0.01
          example: 100.00

    TransferRequestDto:
      type: object
      required:
        - fromCardNumber
        - toCardNumber
        - amount
      properties:
        fromCardNumber:
          type: string
          example: "4532015112830366"
        toCardNumber:
          type: string
          example: "4532015112830367"
        amount:
          type: number
          format: decimal
          minimum: 0.01
          example: 50.00

    TransactionDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        type:
          type: string
          enum: [DEPOSIT, TRANSFER, WITHDRAWAL]
          example: TRANSFER
        amount:
          type: number
          format: decimal
          example: 50.00
        fromCard:
          type: string
          example: "4532015112830366"
        toCard:
          type: string
          example: "4532015112830367"
        transactionDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [SUCCESS, FAILED, PENDING]
          example: SUCCESS

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          example: 400
        error:
          type: string
          example: Bad Request
        message:
          type: string
          example: Недостаточно средств на карте
        path:
          type: string
          example: /api/transaction/transfer

paths:
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: Регистрация нового пользователя
      description: Создает нового пользователя в системе
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthDto'
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Пользователь уже существует
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: Авторизация пользователя
      description: Аутентифицирует пользователя и возвращает JWT токен
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешная авторизация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/user/create:
    post:
      tags:
        - User Controller
      summary: Создание новой карты
      description: Создает новую банковскую карту для текущего аутентифицированного пользователя
      operationId: createCard
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Карта успешно создана
        '400':
          description: Неверный запрос или превышен лимит карт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Пользователь не аутентифицирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/user:
    get:
      tags:
        - User Controller
      summary: Получить список моих карт
      description: Возвращает все карты текущего пользователя с поддержкой пагинации и сортировки
      operationId: getUserCards
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Номер страницы
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Размер страницы
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Поле и направление сортировки
          schema:
            type: string
            example: createdDate,desc
      responses:
        '200':
          description: Список карт успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardDto'
        '401':
          description: Пользователь не аутентифицирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/user/request-block:
    post:
      tags:
        - User Controller
      summary: Запрос на блокировку карты
      description: Позволяет пользователю отправить запрос на блокировку своей карты
      operationId: requestBlock
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: query
          required: true
          description: ID карты для блокировки
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Запрос на блокировку успешно отправлен
          content:
            application/json:
              schema:
                type: string
                example: Запрос на блокировку успешно отправлен
        '400':
          description: Карта уже заблокирована или запрос уже отправлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Пользователь не аутентифицирован
        '403':
          description: Пользователь не имеет доступа к данной карте
        '404':
          description: Карта не найдена

  /api/cards/{id}/balance:
    get:
      tags:
        - Cards Controller
      summary: Получить баланс карты
      description: Возвращает текущий баланс указанной карты
      operationId: viewBalance
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID карты
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Баланс успешно получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
        '401':
          description: Пользователь не аутентифицирован
        '403':
          description: Доступ к карте запрещен
        '404':
          description: Карта не найдена

  /api/cards/{id}:
    get:
      tags:
        - Cards Controller
      summary: Получить информацию о карте
      description: Возвращает полную информацию о карте
      operationId: getCardById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID карты
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Информация о карте успешно получена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardDto'
        '401':
          description: Пользователь не аутентифицирован
        '403':
          description: Доступ к карте запрещен
        '404':
          description: Карта не найдена

  /api/transaction/deposit:
    post:
      tags:
        - Transaction Controller
      summary: Пополнение баланса карты
      description: Позволяет пополнить баланс указанной карты на заданную сумму
      operationId: deposit
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositRequest'
      responses:
        '200':
          description: Баланс успешно пополнен
          content:
            application/json:
              schema:
                type: string
                example: Баланс успешно пополнен
        '400':
          description: Неверные параметры запроса
        '404':
          description: Карта не найдена

  /api/transaction/transfer:
    post:
      tags:
        - Transaction Controller
      summary: Перевод между картами
      description: Выполняет перевод денежных средств между двумя картами
      operationId: transfer
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequestDto'
      responses:
        '200':
          description: Перевод выполнен успешно
          content:
            application/json:
              schema:
                type: string
                example: Перевод выполнен успешно
        '400':
          description: Неверные параметры запроса или недостаточно средств
        '404':
          description: Одна из карт не найдена

  /api/transaction/my:
    get:
      tags:
        - Transaction Controller
      summary: Получить историю транзакций пользователя
      description: Возвращает историю всех транзакций текущего пользователя
      operationId: getMyTransaction
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Номер страницы
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Размер страницы
          schema:
            type: integer
            default: 10
        - name: sort
          in: query
          description: Поле и направление сортировки
          schema:
            type: string
            example: transactionDate,desc
      responses:
        '200':
          description: История транзакций успешно получена
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionDto'
        '401':
          description: Пользователь не аутентифицирован

  /api/admin/users:
    get:
      tags:
        - Admin Controller
      summary: Получить список всех пользователей
      description: Возвращает список всех зарегистрированных пользователей системы
      operationId: getAllUsers
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Номер страницы
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Размер страницы
          schema:
            type: integer
            default: 20
        - name: sort
          in: query
          description: Поле и направление сортировки
          schema:
            type: string
            example: id,asc
      responses:
        '200':
          description: Список пользователей успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
        '401':
          description: Пользователь не аутентифицирован
        '403':
          description: Недостаточно прав для доступа к ресурсу
    post:
      tags:
        - Admin Controller
      summary: Создание нового пользователя
      description: Администратор создает нового пользователя в системе
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthDto'
      responses:
        '201':
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                type: string
                example: Пользователь успешно создан
        '400':
          description: Неверные данные пользователя
        '401':
          description: Пользователь не аутентифицирован
        '403':
          description: Недостаточно прав для выполнения операции
        '409':
          description: Пользователь с таким email уже существует

  /api/admin/cards/block:
    post:
      tags:
        - Admin Controller
      summary: Подтверждение блокировки карты
      description: Администратор подтверждает и выполняет блокировку карты
      operationId: approveBlock
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: query
          required: true
          description: ID карты для блокировки
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Карта успешно заблокирована
          content:
            application/json:
              schema:
                type: string
                example: Карта успешно заблокирована
        '400':
          description: Карта уже заблокирована или невалидный запрос
        '401':
          description: Пользователь не аутентифицирован
        '403':
          description: Недостаточно прав для выполнения операции
        '404':
          description: Карта не найдена

  /api/admin/cards/unblock:
    post:
      tags:
        - Admin Controller
      summary: Разблокировка карты
      description: Администратор разблокирует ранее заблокированную карту
      operationId: unblock
      security:
        - bearerAuth: []
      parameters:
        - name: cardId
          in: query
          required: true
          description: ID карты для разблокировки
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Карта успешно разблокирована
          content:
            application/json:
              schema:
                type: string
                example: Карта успешно разблокирована
        '400':
          description: Карта не заблокирована или невалидный запрос
        '401':
          description: Пользователь не аутентифицирован
        '403':
          description: Недостаточно прав для выполнения операции
        '404':
          description: Карта не найдена

  /api/admin/transaction:
    get:
      tags:
        - Admin Controller
      summary: Получить все транзакции
      description: Возвращает историю всех транзакций в системе
      operationId: getAllTransactions
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Номер страницы
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Размер страницы
          schema:
            type: integer
            default: 50
        - name: sort
          in: query
          description: Поле и направление сортировки
          schema:
            type: string
            example: transactionDate,desc
      responses:
        '200':
          description: Список транзакций успешно получен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionDto'
        '401':
          description: Пользователь не аутентифицирован
        '403':
          description: Недостаточно прав для доступа к ресурсу